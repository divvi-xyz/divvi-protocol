import {
  VELODROME_SUPPORTED_LIQUIDITY_POOL_ADDRESSES,
  VELODROME_NETWORK_ID,
} from './constants'
import { calculateRevenueDrome } from '../utils/drome/calculateRevenueDrome'

/**
 * Calculates trading fee revenue generated for Velodrome DEX on Optimism Network.
 *
 * **KPI Unit**: USD (United States Dollars)
 *
 * **Business Purpose**: Measures the trading fee revenue attributable to a specific user's trading activity
 * on Velodrome DEX liquidity pools. This metric quantifies the economic value generated by user interactions
 * with the decentralized exchange and supports revenue sharing calculations for the Velodrome ecosystem.
 *
 * **Protocol Context**: Velodrome is an Optimism-native AMM (Automated Market Maker) designed to serve as the
 * central liquidity hub for the Optimism ecosystem. It builds on the vote-escrowed model with enhanced tokenomics
 * and offers efficient token swaps with variable fee structures.
 *
 * **Network**: Optimism Mainnet (and networks where Velodrome has deployed liquidity pools)
 *
 * **Revenue Model**: Velodrome generates revenue through trading fees on token swaps, with fees varying by pool
 * based on volatility and token pair characteristics. Revenue is shared between liquidity providers and the protocol.
 *
 * **Data Sources**:
 * - **HyperSync**: Optimism Network swap events from Velodrome liquidity pools
 * - **RPC Queries**: Pool fee rates via Viem public client calls to liquidity pool contracts
 * - **Token Price API**: Historical token prices via `fetchTokenPrices` utility
 * - **Block Data**: Timestamps via `getBlockRange` utility for temporal filtering
 *
 * **Business Assumptions**:
 * - Trading fees are proportional to trade volume and pool-specific fee rates
 * - Revenue attribution is based on user's direct trading activity within specified time window
 * - USD conversion uses token prices at time of each transaction for accuracy
 * - Only whitelisted liquidity pools are included in revenue calculations
 * - Fee rates are dynamically set per pool based on volatility and governance decisions
 *
 * **Shared Implementation**: Uses the common `calculateRevenueDrome` utility which handles the core
 * trading fee calculation logic shared between Velodrome and Aerodrome (fork relationship).
 *
 * **Calculation Method**:
 * 1. Delegates to the shared calculateRevenueDrome utility
 * 2. Passes Velodrome-specific supported liquidity pool addresses
 * 3. Uses Optimism network ID for transaction data retrieval
 * 4. Returns aggregated trading fee revenue across all supported pools
 *
 * @param params - Calculation parameters
 * @param params.address - User wallet address to calculate trading fee revenue for
 * @param params.startTimestamp - Start of time window for revenue calculation (inclusive)
 * @param params.endTimestampExclusive - End of time window for revenue calculation (exclusive)
 *
 * @returns Promise resolving to total trading fee revenue in USD generated by user's activity
 */
export async function calculateKpi({
  address,
  startTimestamp,
  endTimestampExclusive,
}: {
  address: string
  startTimestamp: Date
  endTimestampExclusive: Date
}): Promise<number> {
  return calculateRevenueDrome({
    address,
    startTimestamp,
    endTimestampExclusive,
    supportedLiquidityPoolAddresses:
      VELODROME_SUPPORTED_LIQUIDITY_POOL_ADDRESSES,
    networkId: VELODROME_NETWORK_ID,
  })
}
