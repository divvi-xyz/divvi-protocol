import { RedisClientType } from '@redis/client'
import { KpiResultByReferrerId, NetworkId } from '../../../types'
import { getBlockRange } from '../utils/events'
import { fetchNetworkMetrics } from '../utils/networks'

/**
 * Calculates gas usage for Base infrastructure activity.
 *
 * **KPI Unit**: Gas units (computational units consumed)
 *
 * **Business Purpose**: Measures the computational resources (gas) consumed by a specific user's
 * transactions on Base network. This metric quantifies the infrastructure utilization generated by user
 * interactions and supports gas usage analysis for network sustainability and resource allocation.
 *
 * **Protocol Context**: Base tracks gas consumption to measure network utilization
 * and infrastructure impact. Gas usage serves as a proxy for computational resource consumption and
 * network contribution, supporting infrastructure funding decisions and network optimization.
 *
 * **Network**: Base Mainnet
 *
 * **Data Sources**:
 * - **HyperSync**: Transaction and gas usage data from Base network via HyperSync client
 * - **Block Data**: Timestamps via `getBlockRange` utility for temporal filtering
 *
 * **Business Assumptions**:
 * - Gas usage accurately represents computational resource consumption
 * - User's infrastructure impact is proportional to total gas consumed within time window
 * - All transaction types contribute equally to network utilization regardless of purpose
 * - Gas measurements include both successful and failed transaction attempts
 * - Infrastructure funding allocation can be based on proportional gas contribution
 *
 * **Gas Types**: Transaction execution gas, contract interaction gas, token transfer gas, and smart contract deployment gas
 *
 * **Calculation Method**:
 * 1. Queries all transactions initiated by user wallet within the specified time window
 * 2. Retrieves transaction receipts to extract gas used for each transaction
 * 3. Filters transactions by block timestamp to ensure they fall within the time range
 * 4. Aggregates total gas consumed across all user transactions
 * 5. Returns total gas usage representing user's infrastructure utilization
 *
 * @param params - Calculation parameters
 * @param params.address - User wallet address to calculate gas usage for
 * @param params.startTimestamp - Start of time window for gas calculation (inclusive)
 * @param params.endTimestampExclusive - End of time window for gas calculation (exclusive)
 * @param params.redis - Optional Redis client for caching block ranges
 * @param params.referrerId - Referrer identifier for result attribution
 *
 * @returns Promise resolving to total gas units consumed by user's transactions and metadata including total transactions per referrerId
 */
export async function calculateKpi({
  address,
  startTimestamp,
  endTimestampExclusive,
  redis,
  referrerId,
}: {
  address: string
  startTimestamp: Date
  endTimestampExclusive: Date
  redis?: RedisClientType
  referrerId: string
}): Promise<KpiResultByReferrerId> {
  const { startBlock, endBlockExclusive } = await getBlockRange({
    networkId: NetworkId['base-mainnet'],
    startTimestamp,
    endTimestampExclusive,
    redis,
  })

  const { totalGasUsed: kpi, totalTransactions } = await fetchNetworkMetrics({
    networkId: NetworkId['base-mainnet'],
    users: [address],
    startBlock,
    endBlockExclusive,
  })
  return {
    [referrerId]: {
      referrerId,
      kpi,
      metadata: { totalTransactions },
    },
  }
}
