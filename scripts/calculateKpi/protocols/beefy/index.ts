import {
  BeefyInvestorTransactionWithUsdBalance,
  BeefyVaultTvlData,
  VaultInfo,
} from './types'
import { getStrategyContract } from '../utils/viem'
import { TokenPriceData } from '../../../types'
import { getVaults } from './getVaults'
import { fetchTokenPrices } from '../utils/tokenPrices'
import { getErc20Contract } from '../../../utils'
import { parseUnits } from 'viem'

// 8 was chosen arbitrarily, any large enough number will do,
// since we expect revenue to often be small fractions of dollars.
const REVENUE_USD_PRECISION = 8

/**
 * Given a list of transaction history on a particular Beefy vault and a timestamp,
 * returns a user's TVL in the vault at the specified time.
 * Requires the list of txHistory to be sorted from earliest to most-recent.
 */
export function getUserTvl(
  txHistory: BeefyInvestorTransactionWithUsdBalance[],
  timestamp: Date,
): number {
  let lastTvl = 0
  for (const tx of txHistory) {
    if (new Date(tx.datetime) >= timestamp) {
      return lastTvl
    }
    lastTvl = tx.usd_balance
  }
  return lastTvl
}

/**
 * Given a list of Beefy vault TVL data and a timestamp, returns the vault's TVL at
 * the specified time.
 * Requires the list of tvlHistory to be sorted from earliest to most-recent.
 */
export function getVaultTvl(
  tvlHistory: BeefyVaultTvlData[],
  timestamp: Date,
): number {
  let lastTvl = tvlHistory[0][1]
  for (const tvl of tvlHistory) {
    if (new Date(tvl[0]) >= timestamp) {
      return lastTvl
    }
    lastTvl = tvl[1]
  }
  return lastTvl
}

/**
 * Given a list of historical token prices and a timestamp, returns the nearest token price
 * to the specified time.
 * Requires the list of tokenPrices to be sorted from earliest to most-recent.
 */
export function getTokenPrice(
  tokenPrices: TokenPriceData[],
  timestamp: Date,
): number {
  let lastPrice = tokenPrices[0].priceUsd
  for (const tokenPrice of tokenPrices) {
    if (new Date(tokenPrice.priceFetchedAt) >= timestamp) {
      return Number(lastPrice)
    }
    lastPrice = tokenPrice.priceUsd
  }
  return Number(lastPrice)
}

/**
 * Given historical information about a vault and a user's transactions, calculates the amount of fee
 * revenue generated by the user's interaction with the vault, denominated in the native currency
 * of the chain the vault is deployed on.
 */
export async function calculateVaultRevenue(
  vaultInfo: VaultInfo,
): Promise<number> {
  const strategyContract = await getStrategyContract(
    vaultInfo.vaultAddress,
    vaultInfo.networkId,
  )
  const nativeTokenAddress = await strategyContract.read.native()
  const tokenId = `${vaultInfo.networkId}:native`
  const tokenContract = await getErc20Contract(
    nativeTokenAddress,
    vaultInfo.networkId,
  )
  const tokenDecimals = BigInt(await tokenContract.read.decimals())

  // Fetch the historical prices of the chain's native token
  const startTimestamp = vaultInfo.feeEvents[0].timestamp
  const endTimestampExclusive =
    vaultInfo.feeEvents[vaultInfo.feeEvents.length - 1].timestamp
  const tokenPrices = await fetchTokenPrices({
    tokenId,
    startTimestamp,
    endTimestampExclusive,
  })

  let totalUsdContribution = 0

  for (const { beefyFee, timestamp } of vaultInfo.feeEvents) {
    const userTvl = getUserTvl(vaultInfo.txHistory, timestamp)
    const vaultTvl = getVaultTvl(vaultInfo.vaultTvlHistory, timestamp)

    const tokenPriceUsd = getTokenPrice(tokenPrices, new Date(timestamp))

    const partialNativeContribution =
      (BigInt(userTvl * 10 ** 18) * BigInt(beefyFee)) /
      BigInt(vaultTvl * 10 ** 18)
    const partialUsdContribution =
      Number(
        (parseUnits(tokenPriceUsd.toString(), REVENUE_USD_PRECISION) *
          partialNativeContribution) /
          10n ** tokenDecimals,
      ) /
      10 ** REVENUE_USD_PRECISION

    totalUsdContribution += partialUsdContribution
  }

  return totalUsdContribution
}

export async function calculateKpi({
  address,
  startTimestamp,
  endTimestampExclusive,
}: {
  address: string
  startTimestamp: Date
  endTimestampExclusive: Date
}): Promise<number> {
  const vaultsInfo = await getVaults(
    address,
    startTimestamp,
    endTimestampExclusive,
  )

  let totalRevenue = 0
  for (const vaultInfo of Object.values(vaultsInfo)) {
    if (vaultInfo.vaultTvlHistory.length === 0) {
      continue
    }
    const vaultRevenue = await calculateVaultRevenue(vaultInfo)
    totalRevenue += vaultRevenue
  }
  return totalRevenue
}
