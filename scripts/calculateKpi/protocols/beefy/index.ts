import {
  BeefyInvestorTransactionWithUsdBalance,
  BeefyVaultTvlData,
  VaultInfo,
} from './types'
import { getStrategyContract } from '../utils/viem'
import { TokenPriceData } from '../../../types'
import { getVaults } from './getVaults'
import { fetchTokenPrices } from '../utils/tokenPrices'
import { getErc20Contract } from '../../../utils'
import { parseUnits } from 'viem'

// 8 was chosen arbitrarily, any large enough number will do,
// since we expect revenue to often be small fractions of dollars.
const REVENUE_USD_PRECISION = 8

/**
 * Calculates a user's Total Value Locked (TVL) in a Beefy vault at a specific timestamp.
 *
 * **Business Purpose**: Determines the USD value of a user's position in a vault at a given point in time,
 * which is essential for proportional fee revenue attribution calculations.
 *
 * **Data Requirements**: Transaction history must be sorted chronologically from earliest to most recent.
 *
 * **Calculation Method**: Iterates through transaction history to find the last known balance before the target timestamp.
 *
 * @internal
 * @param txHistory - Chronologically sorted transaction history with USD balance data
 * @param timestamp - Target timestamp to calculate TVL for
 * @returns User's TVL in USD at the specified timestamp
 */
export function getUserTvl(
  txHistory: BeefyInvestorTransactionWithUsdBalance[],
  timestamp: Date,
): number {
  let lastTvl = 0
  for (const tx of txHistory) {
    if (new Date(tx.datetime) >= timestamp) {
      return lastTvl
    }
    lastTvl = tx.usd_balance
  }
  return lastTvl
}

/**
 * Calculates the total TVL of a Beefy vault at a specific timestamp.
 *
 * **Business Purpose**: Determines the total value locked in a vault at a given point in time,
 * used as the denominator for calculating a user's proportional share of fee revenue.
 *
 * **Data Requirements**: TVL history must be sorted chronologically from earliest to most recent.
 *
 * @internal
 * @param tvlHistory - Chronologically sorted vault TVL data as [timestamp, tvl] tuples
 * @param timestamp - Target timestamp to calculate vault TVL for
 * @returns Total vault TVL in USD at the specified timestamp
 */
export function getVaultTvl(
  tvlHistory: BeefyVaultTvlData[],
  timestamp: Date,
): number {
  let lastTvl = tvlHistory[0][1]
  for (const tvl of tvlHistory) {
    if (new Date(tvl[0]) >= timestamp) {
      return lastTvl
    }
    lastTvl = tvl[1]
  }
  return lastTvl
}

/**
 * Retrieves the token price closest to a specified timestamp from historical price data.
 *
 * **Business Purpose**: Provides accurate USD conversion rates for fee calculations at the time of each transaction,
 * ensuring revenue calculations reflect actual market conditions when fees were generated.
 *
 * **Data Requirements**: Token prices must be sorted chronologically from earliest to most recent.
 *
 * @internal
 * @param tokenPrices - Chronologically sorted historical token price data
 * @param timestamp - Target timestamp to get price for
 * @returns Token price in USD at or before the specified timestamp
 */
export function getTokenPrice(
  tokenPrices: TokenPriceData[],
  timestamp: Date,
): number {
  let lastPrice = tokenPrices[0].priceUsd
  for (const tokenPrice of tokenPrices) {
    if (new Date(tokenPrice.priceFetchedAt) >= timestamp) {
      return Number(lastPrice)
    }
    lastPrice = tokenPrice.priceUsd
  }
  return Number(lastPrice)
}

/**
 * Calculates the management fee revenue generated by a user's interaction with a specific Beefy vault.
 *
 * **Business Purpose**: Determines the USD value of management fees attributable to a user's vault position
 * based on their proportional share of the vault's total assets during fee collection events.
 *
 * **Revenue Model**: Beefy charges performance fees (typically 4.5%) on yields generated by underlying strategies.
 * Users contribute to these fees proportionally based on their share of the vault's TVL.
 *
 * **Calculation Method**:
 * 1. For each fee event, calculates user's TVL percentage of total vault TVL
 * 2. Applies this percentage to the total fee amount to get user's contribution
 * 3. Converts fee amount to USD using historical token prices
 * 4. Sums contributions across all fee events in the time period
 *
 * @internal
 * @param vaultInfo - Complete vault information including transaction history, TVL data, and fee events
 * @returns Promise resolving to total fee revenue in USD generated by user's vault activity
 *
 * @throws Error if strategy contract cannot be accessed or token data is unavailable
 */
export async function calculateVaultRevenue(
  vaultInfo: VaultInfo,
): Promise<number> {
  const strategyContract = await getStrategyContract(
    vaultInfo.vaultAddress,
    vaultInfo.networkId,
  )
  const nativeTokenAddress = await strategyContract.read.native()
  const tokenId = `${vaultInfo.networkId}:native`
  const tokenContract = await getErc20Contract(
    nativeTokenAddress,
    vaultInfo.networkId,
  )
  const tokenDecimals = BigInt(await tokenContract.read.decimals())

  // Fetch the historical prices of the chain's native token
  const startTimestamp = vaultInfo.feeEvents[0].timestamp
  const endTimestampExclusive =
    vaultInfo.feeEvents[vaultInfo.feeEvents.length - 1].timestamp
  const tokenPrices = await fetchTokenPrices({
    tokenId,
    startTimestamp,
    endTimestampExclusive,
  })

  let totalUsdContribution = 0

  for (const { beefyFee, timestamp } of vaultInfo.feeEvents) {
    const userTvl = getUserTvl(vaultInfo.txHistory, timestamp)
    const vaultTvl = getVaultTvl(vaultInfo.vaultTvlHistory, timestamp)

    const tokenPriceUsd = getTokenPrice(tokenPrices, new Date(timestamp))

    const partialNativeContribution =
      (BigInt(userTvl * 10 ** 18) * BigInt(beefyFee)) /
      BigInt(vaultTvl * 10 ** 18)
    const partialUsdContribution =
      Number(
        (parseUnits(tokenPriceUsd.toString(), REVENUE_USD_PRECISION) *
          partialNativeContribution) /
          10n ** tokenDecimals,
      ) /
      10 ** REVENUE_USD_PRECISION

    totalUsdContribution += partialUsdContribution
  }

  return totalUsdContribution
}

/**
 * Calculates vault management fee revenue generated for Beefy Finance protocol.
 *
 * **KPI Unit**: USD (United States Dollars)
 *
 * **Business Purpose**: Measures the vault management fee revenue attributable to a specific user's
 * deposit activity in Beefy vaults over a given time span. This metric quantifies the economic value generated by user
 * participation in Beefy's yield optimization strategies and supports fee distribution calculations.
 *
 * **Protocol Context**: Beefy Finance is a decentralized yield optimization platform that automatically
 * compounds yields for users across multiple DeFi protocols. It charges a performance fee for managing
 * user deposits and generating optimized returns.
 *
 * **Supported Networks**: Multiple EVM-compatible networks where Beefy has deployed vault strategies
 *
 * **Data Sources**:
 * - **Beefy API**: Vault configurations, TVL data, and strategy metadata from `api.beefy.finance`
 * - **RPC Queries**: User deposit/withdrawal events via Viem public client calls to vault contracts
 * - **Token Price API**: Historical token prices via `fetchTokenPrices` utility for USD conversion
 * - **Block Data**: Timestamps via `getBlockRange` utility for temporal filtering
 *
 * **Business Assumptions**:
 * - Revenue attribution is proportional to user's share of vault deposits within time window
 * - USD conversion uses token prices at time of each transaction
 * - Fee distribution is immediate and based on real-time vault performance
 *
 * **Calculation Method**:
 * 1. Retrieves all configurations for vaults with which user has had transactions from Beefy API
 * 2. Filters vaults by supported networks and active status
 * 3. For each vault, queries user's deposit/withdrawal events within time window
 * 4. For each vault, queries historical Fee events within time window
 * 5. Calculates user's proportional share of vault deposits at the time of each Fee event
 * 6. Determines user contribution to management fee based off their proportional share of vault TVL
 * 7. Converts to USD using historical token prices at transaction timestamps
 * 8. Aggregates user fee contribution across all vaults and networks to get total user fee contribution
 *
 * @param params - Calculation parameters
 * @param params.address - User wallet address to calculate vault management fees for
 * @param params.startTimestamp - Start of time window for revenue calculation (inclusive)
 * @param params.endTimestampExclusive - End of time window for revenue calculation (exclusive)
 *
 * @returns Promise resolving to total vault management fee revenue in USD
 */
export async function calculateKpi({
  address,
  startTimestamp,
  endTimestampExclusive,
}: {
  address: string
  startTimestamp: Date
  endTimestampExclusive: Date
}): Promise<number> {
  const vaultsInfo = await getVaults(
    address,
    startTimestamp,
    endTimestampExclusive,
  )

  let totalRevenue = 0
  for (const vaultInfo of Object.values(vaultsInfo)) {
    if (vaultInfo.vaultTvlHistory.length === 0) {
      continue
    }
    const vaultRevenue = await calculateVaultRevenue(vaultInfo)
    totalRevenue += vaultRevenue
  }
  return totalRevenue
}
